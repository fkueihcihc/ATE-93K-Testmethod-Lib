#ifndef D2SPARLLEL_H_
#define D2SPARLLEL_H_
#include "generic_d2s/d2s_Generic.h"
#include <map>
#define start_cycle 1
#define start_R_cycle 2
#define start_WA_cycle 0
#define start_WD_cycle 1

class d2s_POR : public d2s_Generic{
private:
	d2s_POR(std::string pName):d2s_Generic(pName){};
	d2s_POR(const d2s_POR&);
	d2s_POR& operator= (const d2s_POR&);

public:
    //singleton
    static d2s_POR& Instance(){
        static d2s_POR instance("@");
        d2s_POR& ref = instance;
        return ref;
    }

    /*general parameters*/

    int getAddressBits(){ return 8;}
    int getDataBits(){ return 32;}

    int getLowWaveformIndex(){ return 0;}
    int getHighWaveformIndex(){ return 1;}
    int getLowStrobeWaveformIndex(){ return 3;}
    int getHighStrobeWaveformIndex(){ return 4;}
    int getMaskStrobeWaveformIndex(){ return 5;}

    std::string getInterfaceName(){
    	switch(currentFormat){
    	case 0:
    		return "spuart_w";
    		break;
    	}
    	return "";
    }

    int getPadding(){return 1;}

    int getPadding_R(){return 1;}

    /*write parameters*/
    std::string getWriteTemplatePatternName(){
    	switch(currentFormat){
    	case 0: return "spuart_w";
    	//case 1: return "otherWritePattern";
    	}
    	return "";
    }

    void initWriteValueVectorMaps(){
        bool parametersValid = true;
        //TODO: check parametersValid in new generic implementation...
        assert(parametersValid);

        //address:8bits
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000001, PinVector ("CI_NRSTO",  start_WA_cycle)));//a00
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000002, PinVector ("BI_CLKO",   start_WA_cycle)));//a01
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000004, PinVector ("P_CORE_EN", start_WA_cycle)));//a02
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000008, PinVector ("INV_CLKO",  start_WA_cycle)));//a03

        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000010, PinVector ("CI_NRSTO",  start_WA_cycle+1)));//a04
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000020, PinVector ("BI_CLKO",   start_WA_cycle+1)));//a05
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000040, PinVector ("P_CORE_EN", start_WA_cycle+1)));//a06
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000080, PinVector ("INV_CLKO",  start_WA_cycle+1)));//a07


        //data:32bits
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000001, PinVector ("CI_NRSTO", start_WD_cycle)));//d00
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000002, PinVector ("BI_CLKO",  start_WD_cycle)));//d01
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000004, PinVector ("P_CORE_EN",start_WD_cycle)));//d02
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000008, PinVector ("INV_CLKO", start_WD_cycle)));//d03

        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000010, PinVector ("CI_NRSTO", start_WD_cycle+1)));//d04
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000020, PinVector ("BI_CLKO",  start_WD_cycle+1)));//d05
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000040, PinVector ("P_CORE_EN",start_WD_cycle+1)));//d06
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000080, PinVector ("INV_CLKO", start_WD_cycle+1)));//d07

        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000100, PinVector ("CI_NRSTO", start_WD_cycle+2)));//d08
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000200, PinVector ("BI_CLKO",  start_WD_cycle+2)));//d09
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000400, PinVector ("P_CORE_EN",start_WD_cycle+2)));//d10
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000800, PinVector ("INV_CLKO", start_WD_cycle+2)));//d11

        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00001000, PinVector ("CI_NRSTO", start_WD_cycle+3)));//d12
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00002000, PinVector ("BI_CLKO",  start_WD_cycle+3)));//d13
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00004000, PinVector ("P_CORE_EN",start_WD_cycle+3)));//d14
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00008000, PinVector ("INV_CLKO", start_WD_cycle+3)));//d15

        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00010000, PinVector ("CI_NRSTO", start_WD_cycle+4)));//d16
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00020000, PinVector ("BI_CLKO",  start_WD_cycle+4)));//d17
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00040000, PinVector ("P_CORE_EN",start_WD_cycle+4)));//d18
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00080000, PinVector ("INV_CLKO", start_WD_cycle+4)));//d19

        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00100000, PinVector ("CI_NRSTO", start_WD_cycle+5)));//d20
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00200000, PinVector ("BI_CLKO",  start_WD_cycle+5)));//d21
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00400000, PinVector ("P_CORE_EN",start_WD_cycle+5)));//d22
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00800000, PinVector ("INV_CLKO", start_WD_cycle+5)));//d23

        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x01000000, PinVector ("CI_NRSTO", start_WD_cycle+6)));//d24
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x02000000, PinVector ("BI_CLKO",  start_WD_cycle+6)));//d25
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x04000000, PinVector ("P_CORE_EN",start_WD_cycle+6)));//d26
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x08000000, PinVector ("INV_CLKO", start_WD_cycle+6)));//d27

        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x10000000, PinVector ("CI_NRSTO", start_WD_cycle+7)));//d28
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x20000000, PinVector ("BI_CLKO",  start_WD_cycle+7)));//d29
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x40000000, PinVector ("P_CORE_EN",start_WD_cycle+7)));//d30
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x80000000, PinVector ("INV_CLKO", start_WD_cycle+7)));//d31



        writeMapInitialized = true;
    }



    /*wait parameters*/
    std::string getTimingPort(){return "@";}

    std::string getWaitTemplatePatternName(){
    	return "PARALLEL_WAIT_TEMP";
    }
};

class d2s_POR_1 : public d2s_Generic{
private:
	d2s_POR_1(std::string pName):d2s_Generic(pName){};
	d2s_POR_1(const d2s_POR_1&);
	d2s_POR_1& operator= (const d2s_POR_1&);

public:
    //singleton
    static d2s_POR_1& Instance(){
        static d2s_POR_1 instance("@");
        d2s_POR_1& ref = instance;
        return ref;
    }

    /*general parameters*/

    int getAddressBits(){ return 4;}
    int getDataBits(){ return 4;}

    int getLowWaveformIndex(){ return 0;}
    int getHighWaveformIndex(){ return 1;}
    int getLowStrobeWaveformIndex(){ return 3;}
    int getHighStrobeWaveformIndex(){ return 4;}
    int getMaskStrobeWaveformIndex(){ return 5;}

    std::string getInterfaceName(){
    	switch(currentFormat){
    	case 0:
    		return "spuart_w";
    		break;
    	}
    	return "";
    }

    int getPadding(){return 1;}

    int getPadding_R(){return 1;}

    /*write parameters*/
    std::string getWriteTemplatePatternName(){
    	switch(currentFormat){
    	case 0: return "spuart_write_temp";
    	//case 1: return "otherWritePattern";
    	}
    	return "";
    }

    void initWriteValueVectorMaps(){
        bool parametersValid = true;
        //TODO: check parametersValid in new generic implementation...
        assert(parametersValid);

        //address
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000001, PinVector ("GMII_TXD4", start_WA_cycle)));//a00
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000002, PinVector ("GMII_TXD5", start_WA_cycle)));//a01
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000004, PinVector ("GMII_TXD6", start_WA_cycle)));//a02
        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000008, PinVector ("GMII_TXD7", start_WA_cycle)));//a03
//        writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000001, PinVector ("JTAG_TMS", start_WA_cycle)));//a00
//                writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000002, PinVector ("JTAG_TDO", start_WA_cycle)));//a01
//                writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000004, PinVector ("JTAG_TRSTN", start_WA_cycle)));//a02
//                writeAddressValueVectorMap[0].insert(BitvaluePinVector (0x00000008, PinVector ("JTAG_TCK", start_WA_cycle)));//a03

        //data
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000001, PinVector ("GMII_TXD4", start_WA_cycle)));//d00
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000002, PinVector ("GMII_TXD5", start_WA_cycle)));//d01
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000004, PinVector ("GMII_TXD6",  start_WA_cycle)));//d02
        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000008, PinVector ("GMII_TXD7", start_WA_cycle)));//d03
//        writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000001, PinVector ("JTAG_TMS", start_WA_cycle)));//d00
//                writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000002, PinVector ("JTAG_TDO", start_WA_cycle)));//d01
//                writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000004, PinVector ("JTAG_TRSTN",  start_WA_cycle)));//d02
//                writeDataValueVectorMap[0].insert(BitvaluePinVector (0x00000008, PinVector ("JTAG_TCK", start_WA_cycle)));//d03


        writeMapInitialized = true;
    }

    /*wait parameters*/
    std::string getTimingPort(){return "@";}

    std::string getWaitTemplatePatternName(){
    	return "spuart_wait_temp";
    }

};
#endif
